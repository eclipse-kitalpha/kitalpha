/*******************************************************************************
 * Copyright (c) 2014, 2020 Thales Global Services S.A.S.
 *  This program and the accompanying materials are made available under the
 *  terms of the Eclipse Public License 2.0 which is available at
 *  http://www.eclipse.org/legal/epl-2.0
 *  
 *  SPDX-License-Identifier: EPL-2.0
 * 
 * Contributors:
 *  Thales Global Services S.A.S - initial API and implementation
 ******************************************************************************/
 
 /**
 *	Viewpoint ComponentSamplePerformance
 *	@author: Benoît Langlois
 *	@date: 27/08/14
 *
 */
 
import external "platform:/resource/org.polarsys.kitalpha.vp.componentsample.design/description/ComponentSample.odesign"

Diagrams ComponentSamplePerformance.diagram {
	DiagramExtension "ComponentSamplePerformanceDiagram" {
	 extended-diagram: ComponentSampleDiagram
		Mapping {
			Container ComponentSamplePerformance {
				import: HardwareComponentContainer_CM
				Contains {
					Container PerformanceNode {
						domain-context: ComponentSamplePerformance.data.Performance provided-by association external emde.ExtensibleElement.ownedExtensions
						Representation {
							Label {
								content: "Cost: " + ComponentSamplePerformance.data.Performance.cost + "/Complexity: " + ComponentSamplePerformance.data.Performance.complexity 
								police: black
							}
							Style {
								FlatStyle {
									border: black background: light_chocolate foreground: light_yellow
								}
							}
						}
						Representation {
							condition: Java WhenTooComplex
							Label {
								content: "Cost: " + ComponentSamplePerformance.data.Performance.cost + "/Complexity: " + ComponentSamplePerformance.data.Performance.complexity 
								police: black
							}
							Style {
								FlatStyle {
									border: black background: light_red foreground: light_yellow
								}
							}
						}
						Contains {
							Node PerformanceStatusNode {
								domain-context: ComponentSamplePerformance.data.PerformanceStatus provided-by association ComponentSamplePerformance.data.Performance.status
								Representation {
									Label {
										content: "Overhead: " + ComponentSamplePerformance.data.PerformanceStatus.overhead
										position: node alignment: center
									}
								Style {
									BasicStyle { background: light_chocolate form: Square }
							   	}
							  }
							}
						}
					}
				} 
			}
		}
		Actions{
			// PerformanceNode actions
			Create PerformanceNodeCreate { label: "Performance" action-for: ComponentSamplePerformance.PerformanceNode}
			Drop PerformanceNodeDrop { label: "Drop Performance" action-for:  ComponentSamplePerformance.PerformanceNode}
			Delete PerformanceNodeDelete { label: "Delete Performance" action-for:  ComponentSamplePerformance.PerformanceNode}

			// PerformanceStatusNode actions
			Create PerformanceStatusNodeCreate { label: "Status" action-for: ComponentSamplePerformance.PerformanceNode.PerformanceStatusNode}
			Delete QPerformanceStatusNodeDelete { label: "Delete Status" action-for:  ComponentSamplePerformance.PerformanceNode.PerformanceStatusNode}
			Drop PerformanceStatusNodeDrop { label: "Drop Status" action-for: ComponentSamplePerformance.PerformanceNode.PerformanceStatusNode}
		}
	}
}