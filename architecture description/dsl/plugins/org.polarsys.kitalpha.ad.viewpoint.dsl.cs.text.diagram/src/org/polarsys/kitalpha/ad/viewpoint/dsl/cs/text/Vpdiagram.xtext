/*******************************************************************************
 * Copyright (c) 2014, 2020 Thales Global Services S.A.S.
 *  This program and the accompanying materials are made available under the
 *  terms of the Eclipse Public License 2.0 which is available at
 *  http://www.eclipse.org/legal/epl-2.0
 *  
 *  SPDX-License-Identifier: EPL-2.0
 * 
 * Contributors:
 *  Thales Global Services S.A.S - initial API and implementation
 ******************************************************************************/
 
 /**
 * 
 * @author Amine Lajmi
 * 		   Faycal Abka
 * 		   Boubekeur Zendagui
 *
 */
grammar org.polarsys.kitalpha.ad.viewpoint.dsl.cs.text.Vpdiagram with org.polarsys.kitalpha.ad.viewpoint.dsl.cs.text.Common

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.polarsys.org/kitalpha/ad/viewpoint/dsl/as/vpdesc/1.0.0" as vpdesc
import "http://www.polarsys.org/kitalpha/ad/viewpoint/dsl/as/commondata/1.0.0" as commondata
import "http://www.polarsys.org/kitalpha/ad/viewpoint/dsl/as/vpdiagram/expression/1.0.0" as expression
import "http://www.polarsys.org/kitalpha/ad/viewpoint/dsl/as/vpdiagram/1.0.0" as vpdiagram
import "http://www.eclipse.org/sirius/1.1.0" as sirius
import "http://www.eclipse.org/sirius/diagram/1.1.0" as siriusDiagram
import "http://www.eclipse.org/sirius/description/1.1.0" as siriusDescription

import "http://www.eclipse.org/sirius/diagram/description/1.1.0" as siriusDiagramDescription
import "http://www.eclipse.org/sirius/diagram/description/style/1.1.0" as siriusDDStyle
import "http://www.eclipse.org/sirius/description/style/1.1.0" as siriusDStyle
import "http://www.polarsys.org/kitalpha/ad/viewpoint/dsl/as/vpdiagram/vpstylecustomization/1.0.0" as styleCusto

generate diagram "http://www.polarsys.org/kitalpha/ad/viewpoint/dsl/cs/text/vpdiagram/1.0.0"

Diagrams returns Diagrams:
	{Diagrams}
	(imports+=AbstractImport)*
	(diagrams=Aspect)
;


AbstractImport:
	ImportNameSpace | ImportGroup
;


ImportNameSpace:
	'import' importedNamespace=FQN
;

ImportGroup:
	'import' 'external' importedGroup=EString
;


Aspect returns vpdesc::Aspect:
	DiagramSet	
;
 /********************************************************************
 * 							vpdiagram
 * 
 ********************************************************************/
DiagramSet returns vpdesc::Aspect:
	{vpdiagram::DiagramSet}
	'Diagrams' name=FQN
	'{'
		(diagrams+=DiagramRepresentation)*
	'}'
;

DiagramRepresentation returns vpdiagram::DiagramRepresentation:
	Diagram | DiagramExtension
;
	
DiagramElement returns vpdiagram::DiagramElement:
	DiagramChildren | BorderedNode
;

DiagramChildren returns vpdiagram::DiagramChildren:
	AbstractEdge | Container | Node
;

AbstractNode returns vpdiagram::AbstractNode:
	Node | BorderedNode | Container
;

AbstractEdge returns vpdiagram::DiagramChildren:
	Edge | EdgeImport
;

AbstractDescription returns vpdiagram::AbstractDescription:
	ContainerDescription | NodeDescription
;

AbstractContainerStyle returns vpdiagram::AbstractContainerStyle:
	FlatStyle | ImageStyle 
;

AbstractNodeStyle returns vpdiagram::AbstractNodeStyle:
	ImageStyle | BasicStyle | HistogramStyle
;

Diagram returns vpdiagram::DiagramRepresentation:
	{vpdiagram::Diagram}
	'Diagram' name=STRING
	'{'
		('description:' description=STRING)?
		(the_domain = DomainContainer)
		(the_MappingSet = MappingSet)?
		(the_ActionSet = ActionSet)?
		(the_DecoratorSet = DecoratorSet)?
	'}'
;
	
DiagramExtension returns vpdiagram::DiagramRepresentation:
	{vpdiagram::DiagramExtension}
	'DiagramExtension' name=STRING
	'{'
		('extended-diagram:' extented_diagram=[siriusDiagramDescription::DiagramDescription| FQN])?
		(the_MappingSet = MappingSet)?
		(the_ActionSet = ActionSet)?
		(the_DecoratorSet = DecoratorSet)?
		(ownedCustomizations=Customizations)?
	'}'
;

MappingSet returns vpdiagram::MappingSet:
	{vpdiagram::MappingSet}
	'Mapping'
	'{'
		(diagram_Elements+=DiagramChildren)*	
	'}'
;

EdgeDescription returns vpdiagram::EdgeDescription:
	{vpdiagram::EdgeDescription}
	'Representation' '{'
		(condition=Condition)?
		('BeginLabel' '{' begin_Label=Label '}')?
		('CenterLabel' '{' center_label=Label '}')?
		('EndLabel' '{' end_label=Label '}')?
		(style=EdgeStyle)?
	'}'
;

Condition returns vpdiagram::Condition:
	{vpdiagram::Condition}
	'condition:'(expression= ForeignExpressionElement) 
;

EdgeStyle returns vpdiagram::EdgeStyle:
	{vpdiagram::EdgeStyle}
	'Style' '{'
		('line-style:' lineStyle=LineStyle)?
		('begin-decorator:' beginDecorator=EdgeArrows)?
		('end-decorator:' endDecorator=EdgeArrows)?
		('color:' color=SystemColors)?
	'}'
;

Container returns vpdiagram::Container:
	{vpdiagram::Container}
	'Container' name=EString '{'
		('import:' imports=[siriusDiagramDescription::ContainerMapping |FQN])?
		('domain-context:' the_domain=NodeDomainElement)?
		('content-layout:' contentLayout=ContainerLayout)?
		(synchronizationMode=SynchronizationMode)?
		(style+=ContainerDescription)*
		(children=ContainerChildren)?
	'}'
;

ContainerChildren returns vpdiagram::ContainerChildren:
	{vpdiagram::ContainerChildren}
	'Contains' '{'
		('reuse' reused_nodes+=[vpdiagram::AbstractNode | FQN] (',' reused_nodes+=[vpdiagram::AbstractNode | FQN])*)?
		(owned_nodes+=AbstractNode)*
	'}'
;

NodeDomainElement returns vpdiagram::NodeDomainElement:
	{vpdiagram::NodeDomainElement}
	(domain_Class = AbstractClass)
	('provided-by' (('query' query=STRING) | ('association' chlidren_list= AbstractAssociation2)))?
;

ContainerDescription returns vpdiagram::ContainerDescription:
	{vpdiagram::ContainerDescription}
	'Representation' '{'
		(condition=Condition)?
		('Label' '{' node_Label=Label '}')?
		('Style' =>'{' style=AbstractContainerStyle '}')?
	'}'
;

BasicStyle returns vpdiagram::BasicStyle:
	{vpdiagram::BasicStyle}
	'BasicStyle' '{'
		('border-color:' borderColor = SystemColors)?
		('background:' backgroundColor=SystemColors)?
		('form:' form=Node_Form)?
	'}'
;

HistogramStyle returns vpdiagram::HistogramStyle:
	{vpdiagram::HistogramStyle}
	'HistogramStyle' '{'
		('border-color:' borderColor = SystemColors)?
		(sections+=HistogramSection)*
	'}'
;

HistogramSection returns vpdiagram::HistogramSection:
	{vpdiagram::HistogramSection}
	'Section' '{'
		('background:' backgroundColor=SystemColors)?
		('foreground:' forgroundColor=SystemColors)?
		('minValue:' minValue=ForeignExpressionElement )?
		('value:' value=ForeignExpressionElement )?
		('maxValue:' maxValue=ForeignExpressionElement )?
	'}'
;

ImageStyle returns vpdiagram::ImageStyle:
	{vpdiagram::ImageStyle}
	'Image' '{'
		('border:' borderColor = SystemColors)?
		('path:' imagePath = STRING)
	'}'	
;

FlatStyle returns vpdiagram::FlatStyle:
	{vpdiagram::FlatStyle}
	'FlatStyle' '{'
		('border:' borderColor=SystemColors)?
	 	('background:' (backgroundStyle=BackgroundStyle)? (backgroundColor=SystemColors))?
		('foreground:' forgroundColor=SystemColors)?
	'}'		
;

Label returns vpdiagram::Label:
	{vpdiagram::Label}
	('content:' value = Expression )
	('police:' (bold ?= 'bold')? (italic ?= 'italic')? (color = SystemColors)? (size = EInt)? )?
;

Node returns vpdiagram::Node:
	{vpdiagram::Node}
	'Node' name=EString '{'
		('import:' imports=[siriusDiagramDescription::NodeMapping | FQN])? 
		('domain-context:' the_domain=NodeDomainElement)?
		(synchronizationMode=SynchronizationMode)?
		(style+=NodeDescription)*
		(children=NodeChildren)?
	'}'
;

NodeChildren returns vpdiagram::NodeChildren:
	{vpdiagram::NodeChildren}
	'Contains' '{'
		('reuse' reused_boderednodes+=[vpdiagram::BorderedNode | FQN] (',' reused_boderednodes+=[vpdiagram::BorderedNode | FQN])*)?
		(owned_boderednodes+=BorderedNode)*
	'}'
;

BorderedNode returns vpdiagram::BorderedNode:
	{vpdiagram::BorderedNode}
	'BorderedNode' name=EString '{'
		('import:' imports=[siriusDiagramDescription::NodeMapping | FQN])? 
		('domain-context:' the_domain=NodeDomainElement)?
		(synchronizationMode=SynchronizationMode)?
		(style+=NodeDescription)*
	'}'
;

NodeDescription returns vpdiagram::NodeDescription:
	{vpdiagram::NodeDescription}
	'Representation' '{'
		(condition=Condition)?
		('Label' '{'node_Label=Label ('position:' label_position=LabelPosition)? ('alignment:' label_alignement=LabelAlignment)? '}')?
		('Style' '{' style=AbstractNodeStyle '}')? 
	'}'	
;

DecoratorSet returns vpdiagram::DecoratorSet:
	{vpdiagram::DecoratorSet}
	'Decorators' 
	'{'
		(decorators+=Decorator)*
	'}'
;

Decorator returns vpdiagram::AbstractDecorator:
	Basic | MappingBased | SemanticBased
;

Basic returns vpdiagram::BasicDecorator:
	{vpdiagram::BasicDecorator}
	'Basic' name=EString
	'{'
		('position:' position=Position)?
		('direction:' direction=DecorationDistributionDirection)?
		('icon:' icon=STRING)?
		('precondition:' precondition=ExpressionElement)?
		('tooltip:' tooltip=ExpressionElement)?
	'}'
;

MappingBased returns vpdiagram::MappingBasedDecorator:
	{vpdiagram::MappingBasedDecorator}
	'MappingBased' name=EString
	'{'
		('position:' position=Position)?
		('direction:' direction=DecorationDistributionDirection)?
		('icon:' icon=STRING)?
		('precondition:' precondition=ExpressionElement)?
		('tooltip:' tooltip=ExpressionElement)?
		('mappings' ':' ('external' '{' (externalMappings+=[siriusDiagramDescription::DiagramElementMapping | STRING] (','
			externalMappings+=[siriusDiagramDescription::DiagramElementMapping | STRING])*) '}'
			(',' (internalMappings+=[vpdiagram::DiagramElement | STRING]))*)?
			|
			(internalMappings+=[vpdiagram::DiagramElement | STRING])?
			(',' internalMappings+=[vpdiagram::DiagramElement | STRING])*
		)
	'}'
;

SemanticBased returns vpdiagram::SemanticBasedDecorator:
	{vpdiagram::SemanticBasedDecorator}
	'SemanticBased' name=EString
	'{'
		('position:' position=Position)?
		('direction:' direction=DecorationDistributionDirection)?
		('icon:' icon=STRING)?
		('precondition:' precondition=ExpressionElement)?
		('tooltip:' tooltip=ExpressionElement)?
		('domain:' domain=AbstractClass)?
	'}'
;

enum Position returns siriusDescription::Position:
	CENTER = 'center'			|
	EAST = 'east'				|
	NORTH = 'north'				|
	NORTH_EAST = 'north_east'	|
	NORTH_WEST = 'north_west'	|
	SOUTH = 'south'				|
	SOUTH_EAST = 'south_east'	|
	SOUTH_WEST = 'south_west'	|
	WEST = 'west'
;

enum DecorationDistributionDirection returns siriusDescription::DecorationDistributionDirection:
	HORIZONTAL = 'horizontal' |
	VERTICAL = 'vertical'
;

ActionSet returns vpdiagram::ActionSet:
	{vpdiagram::ActionSet}
	'Actions' 
	'{'
		(actions+=Action)*
		(openActions+=OpenAction)*
	'}'
;

OpenAction returns vpdiagram::OpenAction:
	{vpdiagram::OpenAction}
	'OpenAction' name=EString
	'{'
		('precondition:' precondition=EString)?
		('label:' label=STRING)?
		('icon:' icon=STRING)?
	'}'
;

Action returns vpdiagram::Action:
	Create | Delete | Drop | ReconnectEdge
;

Create returns vpdiagram::Action:
	{vpdiagram::Create}
	'Create' name=EString
	'{'
		('precondition:' precondition=EString)?
		('label:' label=STRING)?
		('action-for:' tool_For=[vpdiagram::DiagramElement | FQN])
		(onlyTheView?='only-view' )?
		('icon:' icon=STRING)?
	'}'
;

Delete returns vpdiagram::Action:
	{vpdiagram::Delete}
	'Delete' name=EString
	'{'
		('precondition:' precondition=EString)?
		('label:' label=STRING)?
		('action-for:' tool_For=[vpdiagram::DiagramElement | FQN])
	'}'
;


Drop returns vpdiagram::Action:
	{vpdiagram::Drop}
	'Drop' name=EString
	'{'
		('precondition:' precondition=EString)?
		('label:' label=STRING)?
		('action-for:' tool_For=[vpdiagram::DiagramElement | FQN])
	'}'
;

ReconnectEdge returns vpdiagram::Action:
	{vpdiagram::ReconnectEdge}
	'ReconnectEdge' name=EString
	'{'
		('precondition:' precondition=EString)?
		('label:' label=STRING)?
		('action-for:' tool_For=[vpdiagram::DiagramElement | FQN])
	'}'
;

DomainContainer returns vpdiagram::DomainContainer:
	{vpdiagram::DomainContainer}
	('domain-context:' the_domain=AbstractClass)	
;

Edge returns vpdiagram::AbstractEdge:
	{vpdiagram::Edge}
	'Edge' name=EString '{'
		(('association-context:' the_domain=EdgeDomainAssociation) | ('class-association-context:' the_domain=EdgeDomainElement))
		(synchronizationMode=SynchronizationMode)?
		('source:' source+=[vpdiagram::DiagramElement|FQN] ( ',' source+=[vpdiagram::DiagramElement|FQN])*)	
		('target:' target+=[vpdiagram::DiagramElement|FQN] ( ',' target+=[vpdiagram::DiagramElement|FQN])*)	
		(e_description+=EdgeDescription)*
	'}'
;

EdgeImport returns vpdiagram::AbstractEdge:
	{vpdiagram::EdgeImport}
	'EdgeImport' name=EString '{'
		('import:' imports=[siriusDiagramDescription::EdgeMapping | FQN])
		(synchronizationMode=SynchronizationMode)?
		(e_description+=EdgeDescription)*
	'}'
;

EdgeDomainAssociation returns vpdiagram::EdgeDomainAssociation:
	{vpdiagram::EdgeDomainAssociation}
	(('query:' target_query= STRING) | (target_Locator=AbstractAssociation2))
;

EdgeDomainElement returns vpdiagram::EdgeDomainAssociation:
	{vpdiagram::EdgeDomainElement}
	(the_Domain=AbstractClass)
	(('target-query:' target_query= STRING) | ('target-association:' target_Locator=AbstractAssociation2))
	(('source-query:' source_query= STRING) | ('source-association:' source_Locator=AbstractAssociation2))
;


/**********************************************
 * 				Style customization
 **********************************************/
 
Customizations returns styleCusto::Customizations:
	{styleCusto::Customizations}
	'customizations' '{'
	(ownedCustomizationDescriptions+=StyleCustomizationDescriptions (ownedCustomizationDescriptions+=StyleCustomizationDescriptions)*)?
	(ownedCustomizationReuse+=StyleCustomizationReuse (ownedCustomizationReuse+=StyleCustomizationReuse)*)?
	'}'
;

StyleCustomizationDescriptions returns styleCusto::StyleCustomizationDescriptions:
	{styleCusto::StyleCustomizationDescriptions}
	'customization' name=ID ('when' '(' precondtionExpression=CustomizationExpression ')')? 'with' '{'
		(ownedCustomizations+=AbstractCustomization (ownedCustomizations+=AbstractCustomization)*)?
	'}'
;

AbstractCustomization returns styleCusto::AbstractCustomization:
	EdgeStyleCustomization		|
	ColorCustomization			|
	LabelCustomization			|
	AbstractNodeStyleCustomization
;

EdgeStyleCustomization returns styleCusto::EdgeStyleCustomization:
	{styleCusto::EdgeStyleCustomization}
	'edge' ('(' (appliedOn+=[siriusDDStyle::EdgeStyleDescription | STRING] (',' appliedOn+=[siriusDDStyle::EdgeStyleDescription | STRING])*)')')? '{'
		('over-all-edges' ':' applyonAll=EBoolean)?
		('source' ':' sourceArrow=EdgeArrows)?
		('target' ':' targetArrow=EdgeArrows)?
		('routing' ':' routingStyle=EdgeRouting)?
		('folding' ':' foldingStyle=FoldingStyle)?
		('center-source-mappings' ':' (centeredSourceMappings+=[siriusDiagramDescription::DiagramElementMapping | STRING] (','
			centeredSourceMappings+=[siriusDiagramDescription::DiagramElementMapping | STRING])*))?
		('center-target-mappings' ':' (centeredTargetMappings+=[siriusDiagramDescription::DiagramElementMapping | STRING] (','
			centeredTargetMappings+=[siriusDiagramDescription::DiagramElementMapping | STRING])*))?
		('begin-label-style-description' ':' beginLabelStyleDescription=[siriusDDStyle::BeginLabelStyleDescription | STRING])?
		('center-label-style-description' ':' centerLabelStyleDescription=[siriusDDStyle::CenterLabelStyleDescription | STRING])?
		('end-label-style-description' ':' endLabelStyleDescription=[siriusDDStyle::EndLabelStyleDescription | STRING])?
		('line-style' ':' lineStyle=LineStyle)?
		('size' ':' sizeComputationExpression=CustomizationExpression)?
		('end-centering' ':' endCentering=CenterStyle)?
	'}'
;

ColorCustomization returns styleCusto::ColorCustomization:
	{styleCusto::ColorCustomization}
	'paint' (colorUseCase=ColorUseCase) ('(' (appliedOn+=[ecore::EObject | STRING] (',' appliedOn+=[ecore::EObject | STRING])*) ')')?
		(applyonAll?='over-all-colors')?
		('with' color = SystemColors)
;

LabelCustomization returns styleCusto::LabelCustomization:
	{styleCusto::LabelCustomization}
	'label' ('('(appliedOn+=[siriusDStyle::BasicLabelStyleDescription | STRING] (',' appliedOn+=[siriusDStyle::BasicLabelStyleDescription | STRING])*)')')? '{'
		('over-all-labels' ':' applyonAll=EBoolean)?
		(ownedLabelAlignment=LabelAlignementCustomization)?
		('size' ':' size = EInt)?
		('format' ':' format = FontFormat)?
		('color' ':' color = SystemColors)
		(
		'icon' '{'
			'show' ':' showIcon=EBoolean
			'path' ':' iconPath=EString
		'}'
		)?
		
		('expression' ':' expression=CustomizationExpression)?
	'}'
;

LabelAlignementCustomization returns styleCusto::LabelAlignmentCustomization:
	{styleCusto::LabelAlignmentCustomization}
	'alignment' ':' alignment = LabelAlignment
;

AbstractNodeStyleCustomization returns styleCusto::AbstractNodeStyleCustomization:
	ContainerStyleCustomization	|
	NodeStyleCustomization
;

ContainerStyleCustomization returns styleCusto::ContainerStyleCustomization:
	{styleCusto::ContainerStyleCustomization}
	'container' ('(' (appliedOn+=[siriusDDStyle::ContainerStyleDescription | STRING] (',' appliedOn+=[siriusDDStyle::ContainerStyleDescription | STRING])*) ')')? '{'
		('over-all-containers' ':' applyonAll=EBoolean)?
		('width' ':' arcWith = EInt)?
		('height' ':' arcHeight = EInt)?
		('round-corner' ':' roundedCorner=EBoolean)?
		('tooltip-expression' ':' tooltipExpression=CustomizationExpression)?
		('border-dimension' ':' borderSizeComputationExpression=CustomizationExpression)?
		(ownedSpecificContainerStyleCustomization+=SpecificContainerStyleCustomization)*
	'}'
;

SpecificContainerStyleCustomization returns styleCusto::SpecificContainerStyleCustomization:
	ContainerWorkspaceImageCustomization			|
	FlatContainerStyleCustomization					|
	ShapeContainerStyleCustomization
;

ContainerWorkspaceImageCustomization returns styleCusto::ContainerWorkspaceImageCustomization:
	{styleCusto::ContainerWorkspaceImageCustomization}
	'workspace' ':' workspacePath = EString
;

FlatContainerStyleCustomization returns styleCusto::FlatContainerStyleCustomization:
	{styleCusto::FlatContainerStyleCustomization}
	'background' ':' backgroundStyle = BackgroundStyle
;

ShapeContainerStyleCustomization returns styleCusto::ShapeContainerStyleCustomization:
	{styleCusto::ShapeContainerStyleCustomization}
	'shape' ':' shape = ContainerShape
;

NodeStyleCustomization returns styleCusto::NodeStyleCustomization:
	{styleCusto::NodeStyleCustomization}
	'node' ('('(appliedOn+=[siriusDDStyle::NodeStyleDescription | STRING] (',' appliedOn+=[siriusDDStyle::NodeStyleDescription | STRING])*)')')? '{'
		('over-all-nodes' ':' applyonAll=EBoolean)?
		('label-position' ':' labelPosition=LabelPosition)?
		('hide-label' ':' hideLabelByDefault=EBoolean)?
		('resize-kind' ':' resizeKind=ResizeKind)?
		('tooltip-expression' ':' tooltipExpression=CustomizationExpression)?
		('border-dimension' ':' borderSizeComputationExpression=CustomizationExpression)?
		('size-dimension' ':' sizeComputationExpression=CustomizationExpression)?
		(ownedSpecificNodeStyleCustomization+=SpecificNodeStyleCustomization)*
	'}'
;

SpecificNodeStyleCustomization returns styleCusto::SpecificNodeStyleCustomization:
	BundledImageCustomization				|
	LozengeCustomization					|
	GaugeCustomization						|
	EllipseCustomization					|
	NodeWorkspaceImageCustomization			|
	SquareCustomization						|
	DotCustomization
;

BundledImageCustomization returns styleCusto::BundledImageCustomization:
	{styleCusto::BundledImageCustomization}
	'shape' ':' shape = BundledImageShape
;

LozengeCustomization returns styleCusto::LozengeCustomization:
	{styleCusto::LozengeCustomization}
	'lozenge-dimension' ':' '{'
		'width' ':' widthComputationExpression=CustomizationExpression
		'height' ':' heightComputationExpression=CustomizationExpression
	'}'
;

GaugeCustomization returns styleCusto::GaugeCustomization:
	{styleCusto::GaugeCustomization}
	'gauge-alignment' ':' alignement = AlignmentKind
;

EllipseCustomization returns styleCusto::EllipseCustomization:
	{styleCusto::EllipseCustomization}
	'ellipse-dimension' ':' '{' 
		'horizontal' ':' horizontalDiameterComputationExpression=CustomizationExpression
		'vertical' ':' verticalDiameterComputationExpression=CustomizationExpression
	'}'
;

NodeWorkspaceImageCustomization returns styleCusto::NodeWorkspaceImageCustomization:
	{styleCusto::NodeWorkspaceImageCustomization}
	'workspace' ':' workspacePath = EString
;

SquareCustomization returns styleCusto::SquareCustomization:
	{styleCusto::SquareCustomization}
	'square-dimension' ':'
	'{' 
		'width' ':' width=EInt
		'height' ':' height=EInt
	'}'
;

DotCustomization returns styleCusto::DotCustomization:
	{styleCusto::DotCustomization}
	'stroke-dimension' ':' strokeSizeComputationExpression=CustomizationExpression
;


StyleCustomizationReuse returns styleCusto::StyleCustomizationReuse:
	{styleCusto::StyleCustomizationReuse}
	'reuse' (reusedCustomization+=[siriusDescription::EStructuralFeatureCustomization | STRING] (','
		reusedCustomization+=[siriusDescription::EStructuralFeatureCustomization | STRING])*)
	'on' (appliedOn+=[ecore::EObject | STRING] (',' 
		appliedOn+=[ecore::EObject | STRING])*)
;

CustomizationExpression returns styleCusto::CustomizationExpression:
	{styleCusto::CustomizationExpression}
	ownedExpressionElement=AbstractComputableElement
;

 
 /*********************************************
  * 			Enum
  *********************************************/
  
enum AlignmentKind returns siriusDiagram::AlignmentKind:
	HORIZONTAL = 'HORIZONTAL'		|
	SQUARE = 'SQUARE'				|
	VERTICAL = 'VERTICAL'
;
  
enum BundledImageShape returns siriusDiagram::BundledImageShape:
	dot = 'dot'				|
	ring = 'ring'			|
	square = 'square'		|
	stroke = 'stroke'		|
	triangle = 'triangle'
;
  
enum ResizeKind returns siriusDiagram::ResizeKind:
	NONE = 'NONE'				|
	NSEW = 'NSEW'				|
	EAST_WEST = 'EAST_WEST' 	|
	NORTH_SOUTH ='NORTH_SOUTH'  
;
  
enum ContainerShape returns siriusDiagram::ContainerShape:
	parallelogram = 'parallelogram'
;
  
enum FontFormat returns sirius::FontFormat:
	italic = 'italic'				|
	bold = 'bold'					|
	underline = 'underline'			|
	strike_through = 'strike_through'
;
  
enum CenterStyle returns siriusDiagramDescription::CenteringStyle:
	Both = 'Both'			|
	None = 'None'			|
	Source = 'Source'		|
	Target = 'Target'
;
  
enum FoldingStyle returns siriusDiagramDescription::FoldingStyle:
	NONE = 'NONE'		|
	SOURCE = 'SOURCE'	|
	TARGET = 'TARGET'
;
  
enum EdgeRouting returns siriusDiagram::EdgeRouting:
	straight = 'straight'	|
	manhattan = 'manhattan'	|
	tree = 'tree'
;

enum ColorUseCase returns styleCusto::ColorUseCase:
	Border = 'Border'			|
	Color = 'Color'				|
	Background = 'Background'	|
	Foreground = 'foreground'
;


enum Node_Form returns vpdiagram::Node_Form:
	Square='Square' |
	Lozenge='Lozenge' |
	Eclipse='Eclipse' |
	Note = 'Note' |
	Dot = 'Dot' |
	Triangle = 'Triangle' |
	Stroke = 'Stroke' |
	Ring = 'Ring'
;

enum BackgroundStyle returns siriusDiagram::BackgroundStyle:
	GradientLeftToRight='GradientLeftToRight' |
	Liquid='Liquid' |
	GradientTopToBottom='GradientTopToBottom'
;

enum LabelPosition returns siriusDiagram::LabelPosition:
	border='border' | node='node'
;

enum LabelAlignment returns sirius::LabelAlignment:
	CENTER='center' | LEFT='left' | RIGHT='right'
;
	
enum LineStyle returns siriusDiagram::LineStyle:
	solid='solid' | dash='dash' | dot='dot' | dash_dot='dash_dot'
;

enum EdgeArrows returns siriusDiagram::EdgeArrows:
	NoDecoration='NoDecoration' |
	OutputArrow='OutputArrow' |
	InputArrow = 'InputArrow' |
	OutputClosedArrow = 'OutputClosedArrow' |
	InputClosedArrow = 'InputClosedArrow' |
	OutputFillClosedArrow = 'OutputFillClosedArrow' |
	InputFillClosedArrow = 'InputFillClosedArrow' |
	Diamond = 'Diamond' |
	FillDiamond = 'FillDiamond' |
	InputArrowWithDiamond = 'InputArrowWithDiamond' |
	InputArrowWithFillDiamond= 'InputArrowWothFillDiamond'
;

enum SystemColors returns siriusDescription::SystemColors:
	black='black' |
	blue='blue' |
	red = 'red' |
	green = 'green' |
	yellow = 'yellow' |
	purple = 'purple' |
	orange = 'orange' |
	chocolate = 'chocolate' |
	gray = 'gray' |
	white = 'white'|
	dark_blue= 'dark_blue'|
	dark_red= 'dark_red'|
	dark_green= 'dark_green'|
	dark_yellow= 'dark_yellow'|
	dark_purple= 'dark_purple'|
	dark_orange= 'dark_orange'|
	dark_chocolate= 'dark_chocolate'|
	dark_gray= 'dark_gray'|
	light_blue= 'light_blue'|
	light_red= 'light_red'|
	light_green= 'light_green'|
	light_yellow= 'light_yellow'|
	light_purple= 'light_purple'|
	light_orange= 'light_orange'|
	light_chocolate= 'light_chocolate'|
	light_gray= 'light_gray'
;

enum ContainerLayout returns siriusDiagram::ContainerLayout:
	FreeForm='FreeForm' 						|
	List='List'									|
	HorizontalStack = 'HorizontalStack' 		|
	VerticalStack = 'VerticalStack'
;

enum SynchronizationMode returns vpdiagram::SynchronizationMode:
	Synchronized 	 = "synchronized" 		|
	Unsynchronizable = "unsynchronizable"	|
	Not_Synchronized = "not-synchronized"	
;


 /********************************************************************
 * 							Common data
 * 
 ********************************************************************/
AbstractClass returns commondata::AbstractClass:
 	LocalClass2 | ExternalClass
 ;

LocalClass2 returns commondata::AbstractClass:
	{commondata::LocalClass}
	class=[vpdesc::Class|FQN]
;

ExternalClass returns commondata::AbstractClass:
	{commondata::ExternalClass}
	'external' class=[ecore::EClass|FQN]
;

AbstractAssociation2 returns commondata::AbstractAssociation:
	ExternalAssociation | LocalAssociation
;

LocalAssociation returns commondata::AbstractAssociation:
	{commondata::LocalAssociation}
	reference=[vpdesc::AbstractAssociation | FQN]	
;

ExternalAssociation returns commondata::AbstractAssociation:
	{commondata::ExternalAssociation}
	'external' reference=[ecore::EReference| FQN]
;

AbstractAttribute returns commondata::AbstractAttribute:
	ExternalAttribute | LocalAttribute
;

LocalAttribute returns commondata::AbstractAttribute:
	{commondata::LocalAttribute}
	attribute=[vpdesc::Attribute | FQN];

ExternalAttribute returns commondata::AbstractAttribute:
	{commondata::ExternalAttribute}
	'external' attribute=[ecore::EAttribute | FQN]
;


 /********************************************************************
 * 							Expression
 * 
 ********************************************************************/
Expression returns expression::Expression:
 	{expression::Expression}
 //	(value = EString)?
 	(expressionElements+=ExpressionElement ( '+' expressionElements+=ExpressionElement)* )?
 ;
 
AbstractComputableElement returns expression::AbstractComputableElement:
	JavaElement | StringElement
;

ExpressionElement returns expression::ExpressionElement:
	ForeignExpressionElement | StringElement
;

ForeignExpressionElement returns expression::ForeignExpressionElement:
	JavaElement | DomainElement
;

JavaElement returns expression::JavaElement:
	{expression::JavaElement}
	'Java' (method=FQN)
;

DomainElement returns expression::ForeignExpressionElement:
	{expression::DomainElement}
	(attribute = [vpdesc::Attribute | FQN])
;

StringElement returns expression::StringElement:
	{expression::StringElement}
	(value = STRING)
;