<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
  Copyright (c) 2014, 2020 Thales Global Services S.A.S.
   This program and the accompanying materials are made available under the
   terms of the Eclipse Public License 2.0 which is available at
   http://www.eclipse.org/legal/epl-2.0

   SPDX-License-Identifier: EPL-2.0
  
  Contributors:
   Thales Global Services S.A.S - initial API and implementation
-->
<templates>

<template autoinsert="true" context="org.polarsys.kitalpha.ad.viewpoint.dsl.cs.text.Vpdiagram.Diagram" deleted="false" description="New Diagram" enabled="true" id="1" name="Diagram">
Diagram "newDiagramName" {&#13;
	domain-context: ${value:CrossReference('commondata.LocalClass.class')}&#13;
	Mapping {&#13;
		//[Container, Node or Edge] &#13;
	}&#13;
	Actions{&#13;
		//[Actions]&#13;
	}&#13;
}&#13;
</template>

<template autoinsert="true" context="org.polarsys.kitalpha.ad.viewpoint.dsl.cs.text.Vpdiagram.Container" deleted="false" description="New Container provided by local association" enabled="true" id="2" name="Container">
Container newContainerName {&#13;
	domain-context: ${local_class:CrossReference('commondata.LocalClass.class')} provided-by association ${local_association:CrossReference('commondata.LocalAssociation.reference')}&#13;
	Representation {&#13;
		Label { content: ${local_attribute:CrossReference('expression.DomainElement.attribute')} police: black }&#13;
		Style {&#13;
			FlatStyle {	border: blue background: light_gray }&#13;
		}&#13;
	}&#13;
	Contains {&#13;
		//[Container or  Node]&#13;
	}&#13;
}&#13;
</template>

<template autoinsert="true" context="org.polarsys.kitalpha.ad.viewpoint.dsl.cs.text.Vpdiagram.Container" deleted="false" description="New Container provided by external association" enabled="true" id="3" name="Container">
Container newContainerName {&#13;
	domain-context: external ${external_class:CrossReference('commondata.ExternalClass.class')} provided-by association external ${external_association:CrossReference('commondata.ExternalAssociation.reference')}&#13;
	Representation {&#13;
		Label { content: "example" police: black }&#13;
		Style {&#13;
			FlatStyle {	border: blue background: light_gray }&#13;
		}&#13;
	}&#13;
	Contains {&#13;
		//[Container or  Node]&#13;
	}&#13;
}&#13;
</template>


<template autoinsert="true" context="org.polarsys.kitalpha.ad.viewpoint.dsl.cs.text.Vpdiagram.Node" deleted="false" description="New Node provided by local association" enabled="true" id="4" name="Node">
Node newNode {&#13;
	domain-context: ${local_class:CrossReference('commondata.LocalClass.class')} provided-by association ${local_association:CrossReference('commondata.LocalAssociation.reference')}&#13;
	Representation {&#13;
		Label { content: "example" police: black alignment: center}&#13;
		Style {&#13;
			BasicStyle { border-color: black background: light_gray form: Square }&#13;
		}&#13;
	}&#13;
	Contains {&#13;
		//[Container or  Node]&#13;
	}&#13;
}&#13;
</template>

<template autoinsert="true" context="org.polarsys.kitalpha.ad.viewpoint.dsl.cs.text.Vpdiagram.Node" deleted="false" description="New Node provided by external association" enabled="true" id="5" name="Node">
Node newNode {&#13;
	domain-context: ${local_class:CrossReference('commondata.LocalClass.class')} provided-by association external ${external_association:CrossReference('commondata.ExternalAssociation.reference')}&#13;
	Representation {&#13;
		Label { content: "example" police: black alignment: center}&#13;
		Style {&#13;
			BasicStyle { border-color: black background: light_gray form: Square }&#13;
		}&#13;
	}&#13;
	Contains {&#13;
		//[Container or  Node]&#13;
	}&#13;
}&#13;
</template>

<template autoinsert="true" context="org.polarsys.kitalpha.ad.viewpoint.dsl.cs.text.Vpdiagram.Edge" deleted="false" description="New Edge provided by external association" enabled="true" id="6" name="Edge">
Edge newEdge {&#13;
	association-context: external ${external_association:CrossReference('commondata.ExternalAssociation.reference')}&#13;
	source: ${source:CrossReference('Edge.source')}&#13;
	target: ${target:CrossReference('Edge.target')}&#13;
	Representation {&#13;
		Style { end-decorator: OutputArrow color: black }&#13;
	}&#13;
}&#13;
</template>

<template autoinsert="true" context="org.polarsys.kitalpha.ad.viewpoint.dsl.cs.text.Vpdiagram.Action" deleted="false" description="New Create Action" enabled="true" id="7" name="Action">
Create createActionName { label: "Create tool example" action-for:  ${source:CrossReference('Create.tool_For')}}&#13;
</template>

<template autoinsert="true" context="org.polarsys.kitalpha.ad.viewpoint.dsl.cs.text.Vpdiagram.Action" deleted="false" description="New Drop Action" enabled="true" id="8" name="Action">
Drop dropActionName { label: "Drop tool example" action-for:  ${source:CrossReference('Drop.tool_For')}}&#13;
</template>

<template autoinsert="true" context="org.polarsys.kitalpha.ad.viewpoint.dsl.cs.text.Vpdiagram.Action" deleted="false" description="New Delete Action" enabled="true" id="9" name="Action">
Delete deleteActionName { label: "Delete tool example" action-for:  ${source:CrossReference('Delete.tool_For')}}&#13;
</template>

<template autoinsert="true" context="org.polarsys.kitalpha.ad.viewpoint.dsl.cs.text.Vpdiagram.Action" deleted="false" description="New Reconnect Edge Action" enabled="true" id="10" name="Action">
ReconnectEdge reconnectEdgeActionName { label: "Reconnect edge example" action-for:  ${source:CrossReference('ReconnectEdge.tool_For')}}&#13;
</template>


<template autoinsert="true" context="org.polarsys.kitalpha.ad.viewpoint.dsl.cs.text.Vpdiagram.OpenAction" deleted="false" description="New Open Action" enabled="true" id="11" name="OpenAction">
OpenAction openActionName { precondition: openActionPrecondition label: "Open Action Label" icon: "Open Action Icon"  }&#13;
</template>

<template autoinsert="true" context="org.polarsys.kitalpha.ad.viewpoint.dsl.cs.text.Vpdiagram.DiagramExtension" deleted="false" description="New Diagram Extension" enabled="true" id="12" name="Diagram Extension">
DiagramExtension "New Diagram Extension" {&#13;
 extended-diagram: ${source:CrossReference('extended-diagram.extented_diagram')}&#13;
		Mapping {&#13;
		//[Container, Node or Edge] &#13;
	}&#13;
	Actions{&#13;
		//[Actions]&#13;
	}&#13;
}&#13;
</template>


<template autoinsert="true" context="org.polarsys.kitalpha.ad.viewpoint.dsl.cs.text.Vpdiagram.BorderedNode" deleted="false" description="New BorderedNode By Local Association" enabled="true" id="13" name="BorderedNode">
BorderedNode borderedNodeName {&#13;
	domain-context: ${local_class:CrossReference('commondata.LocalClass.class')}  provided-by association ${local_association:CrossReference('commondata.LocalAssociation.reference')} &#13;
	Representation {&#13;
		Label {&#13;
			content: "Expression"&#13;
			position: border&#13;
			alignment: center&#13;
		}&#13;
	Style {&#13;
		BasicStyle {&#13;
		border-color: light_green&#13;
	}&#13;
   }&#13;
  }&#13;
}&#13;
</template>


<template autoinsert="true" context="org.polarsys.kitalpha.ad.viewpoint.dsl.cs.text.Vpdiagram.BorderedNode" deleted="false" description="New BorderedNode By External Association" enabled="true" id="14" name="BorderedNode">
BorderedNode borderedNodeName {&#13;
	domain-context: external ${external_class:CrossReference('commondata.ExternalClass.class')}  provided-by association external ${external_association:CrossReference('commondata.ExternalAssociation.reference')} &#13;
	Representation {&#13;
		Label {&#13;
			content: "Expression"&#13;
			position: border&#13;
			alignment: center&#13;
		}&#13;
	Style {&#13;
		BasicStyle {&#13;
		border-color: light_green&#13;
	}&#13;
   }&#13;
  }&#13;
}&#13;
</template>

<template autoinsert="true" context="org.polarsys.kitalpha.ad.viewpoint.dsl.cs.text.Vpdiagram.kw_import" deleted="false" description="Import External Representation" enabled="true" id="15" name="Import external">import external ${cursor}</template>


<template autoinsert="true" context="org.polarsys.kitalpha.ad.viewpoint.dsl.cs.text.Vpdiagram.Diagram" deleted="false" description="Generate Diagrams for all classes" enabled="true" id="16" name="New Diagram"></template>

<template autoinsert="true" context="org.polarsys.kitalpha.ad.viewpoint.dsl.cs.text.Vpdiagram.EdgeStyleCustomization" deleted="false" description="New edge Style Customization" enabled="true" id="17" name="Edge Style Customization">edge ("${edgeCustomization:CrossReference('vpstylecustomization.EdgeStyleCustomization.appliedOn')}") {&#13;
	over-all-edges : false&#13;
	source : Diamond&#13;
	target : Diamond&#13;
	routing : manhattan&#13;
	folding : TARGET&#13;
	center-source-mappings : "${centerSourceMappings:CrossReference('vpstylecustomization.EdgeStyleCustomization.centeredSourceMappings')}"&#13;
	center-target-mappings : "${centerTargetMapping:CrossReference('vpstylecustomization.EdgeStyleCustomization.centeredTargetMappings')}"&#13;
	begin-label-style-description : "${beginLabelStyleDescription:CrossReference('vpstylecustomization.EdgeStyleCustomization.beginLabelStyleDescription')}"&#13;
	center-label-style-description : "${centerLabelStyleDescription:CrossReference('vpstylecustomization.EdgeStyleCustomization.centerLabelStyleDescription')}"&#13;
	end-label-style-description : "${endLabelStyleDescription:CrossReference('vpstylecustomization.EdgeStyleCustomization.endLabelStyleDescription')}"&#13;
	line-style : solid&#13;
	size : "Size Expression"&#13;
	end-centering : Both&#13;
}&#13;
</template>
<template autoinsert="true" context="org.polarsys.kitalpha.ad.viewpoint.dsl.cs.text.Vpdiagram.ColorCustomization" deleted="false" description="New Color Customization" enabled="true" id="18" name="Color Customization">paint Color ("${colorStyle:CrossReference('vpstylecustomization.ColorDescription.appliedOn')}") with blue&#13;
</template>

<template autoinsert="true" context="org.polarsys.kitalpha.ad.viewpoint.dsl.cs.text.Vpdiagram.LabelCustomization" deleted="false" description="New Label Style Customization" enabled="true" id="19" name="Label Style Customization">label ("${labelStyle:CrossReference('vpstylecustomization.LabelCustomization.appliedOn')}"){&#13;
	over-all-labels : false&#13;
	alignment : left&#13;
	size : 12&#13;
	format : bold&#13;
	color : blue&#13;
	icon {&#13;
		show : true&#13;
		path : "/path/"&#13;
	}&#13;
	expression : "label expression"&#13;
}&#13;
</template>

<template autoinsert="true" context="org.polarsys.kitalpha.ad.viewpoint.dsl.cs.text.Vpdiagram.ContainerStyleCustomization" deleted="false" description="New Container Style Customization" enabled="true" id="20" name="Container Style Customization">container ("${containerStyle:CrossReference('vpstylecustomization.ContainerStyleCustomization.appliedOn')}"){&#13;
	over-all-containers : false&#13;
	width : 12&#13;
	height : 12&#13;
	round-corner : true&#13;
	tooltip-expression : "tooltip computing expression"&#13;
	border-dimension : "border computing expression"&#13;
	//add specific style customization&#13;
	// workspace, background and shape&#13;
}&#13;
</template>

<template autoinsert="true" context="org.polarsys.kitalpha.ad.viewpoint.dsl.cs.text.Vpdiagram.NodeStyleCustomization" deleted="false" description="New Node Style Customization" enabled="true" id="21" name="Node Style Customization">node ("${nodeStyle:CrossReference('vpstylecustomization.NodeStyleCustomization.appliedOn')}"){&#13;
	over-all-nodes : false&#13;
	label-position : border&#13;
	hide-label : false&#13;
	resize-kind : NONE&#13;
	tooltip-expression : "tooltip computing expression"&#13;
	border-dimension : "border computing expression"&#13;
	size-dimension : "size computing expression"&#13;
	//add Specific node style&#13;
	//	shape, lozenge dimension, gauge alignment, ellipse dimension&#13;
	//	workspace, square dimension and stroke dimension&#13;
}&#13;
</template>

<template autoinsert="true" context="org.polarsys.kitalpha.ad.viewpoint.dsl.cs.text.Vpdiagram.kw_reuse" deleted="false" description="New Reuse Style Customization" enabled="true" id="22" name="Reuse Style Customization">reuse "${reusedCustomization:CrossReference('vpstylecustomization.StyleCustomizationReuse.reusedCustomization')}" on "${on:CrossReference('vpstylecustomization.StyleCustomizationReuse.appliedOn')}"</template>
</templates>
