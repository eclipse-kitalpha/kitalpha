--- RCPTT testcase ---
Format-Version: 1.0
Contexts: _nijywB5mEeavOeOrSpOt_g,_5vRRQCdqEeuywMPN7m_s7w
Element-Name: rotative_image
Element-Type: testcase
Element-Version: 3.0
External-Reference: 
Id: _v8g9wCdqEeuywMPN7m_s7w
Save-Time: 1/26/21, 11:06 AM
Testcase-Type: ecl

------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac
Content-Type: text/ecl
Entry-Name: .content

// Open introspection diagram
get-view "Package Explorer" | get-tree | select "aa/aa/Running_Platform_20201115_184058.aird" | get-menu 
    -path "Open With/Aird Editor" | click
get-editor "Running_Platform_20201115_184058.aird" | get-section Representations | get-tree 
    | select "Eclipse Model/Plug-in Extensions and Extension Points (1)/new Plug-in Extensions and Extension Points" 
    | get-menu -path Open | click
    
// Check left image value
with [get-editor "new Plug-in Extensions and Extension Points" | get-diagram -index 1 | get-edit-part 
    -name "new Plug-in Extensions and Extension Points" | get-edit-part -name "org.polarsys.kitalpha.emde.model" 
    | get-edit-part -name "(no name) : org.eclipse.emf.ecore.extension_parser" | get-edit-part 
    -className RotativeImageEditPart] {
	with [get-figure -path 0] {
	    let [ val imageDataLength [get-property "getImage().getImageData().data.length" -raw]] {
		    let [ val imageString [get-property "getImage().toString()" -raw]] {
	    		get-property "getLeftImage().toString()" -raw | equals $imageString | verify-true
	    		get-property "getBottomImage().toString()" -raw | equals $imageString | verify-false
	    		get-property "getRightImage().toString()" -raw | equals $imageString | verify-false
	    		get-property "getTopImage().toString()" -raw | equals $imageString | verify-false
		    } 
		    get-property "getLeftImage().getImageData().data.length" -raw | equals $imageDataLength | verify-true
		    
		    repeat [ val index ] -times 256 -command {
		    	let [ val imageData0 [get-property [concat "getImage().getImageData().data.byte[" [$index | str] "]"] -raw] ] {
		    		get-property [concat "getLeftImage().getImageData().data.byte[" [$index | str] "]"] -raw | equals $imageData0 | verify-true
		    	}
		    }
		}
	}
}

with [get-editor "new Plug-in Extensions and Extension Points" | get-diagram -index 1 | get-edit-part 
    -name "new Plug-in Extensions and Extension Points" | get-edit-part -name "org.eclipse.emf.ecore" 
    | get-edit-part -name "(no name) : org.eclipse.emf.ecore.conversion_delegate" | get-edit-part 
	-className RotativeImageEditPart] {
	with [get-figure -path 0] {
	    let [ val imageDataLength [get-property "getImage().getImageData().data.length" -raw]] {
		    let [ val imageString [get-property "getImage().toString()" -raw]] {
	    		get-property "getLeftImage().toString()" -raw | equals $imageString | verify-false
	    		get-property "getBottomImage().toString()" -raw | equals $imageString | verify-true
	    		get-property "getRightImage().toString()" -raw | equals $imageString | verify-false
	    		get-property "getTopImage().toString()" -raw | equals $imageString | verify-false
		    } 
		    get-property "getBottomImage().getImageData().data.length" -raw | equals $imageDataLength | verify-true
		    
		    repeat [ val index ] -times 256 -command {
		    	let [ val imageData0 [get-property [concat "getImage().getImageData().data.byte[" [$index | str] "]"] -raw] ] {
		    		get-property [concat "getBottomImage().getImageData().data.byte[" [$index | str] "]"] -raw | equals $imageData0 | verify-true
		    	}
		    }
		}
	}
}

with [get-editor "new Plug-in Extensions and Extension Points" | get-diagram -index 1 | get-edit-part 
    -name "new Plug-in Extensions and Extension Points" | get-edit-part -name "org.eclipse.emf.ecore" 
    | get-edit-part -name "org.eclipse.emf.ecore.protocol_parser" | get-edit-part 
	-className RotativeImageEditPart] {
	with [get-figure -path 0] {
	    let [ val imageDataLength [get-property "getImage().getImageData().data.length" -raw]] {
		    let [ val imageString [get-property "getImage().toString()" -raw]] {
	    		get-property "getLeftImage().toString()" -raw | equals $imageString | verify-false
	    		get-property "getBottomImage().toString()" -raw | equals $imageString | verify-false
	    		get-property "getRightImage().toString()" -raw | equals $imageString | verify-true
	    		get-property "getTopImage().toString()" -raw | equals $imageString | verify-false
		    } 
		    get-property "getRightImage().getImageData().data.length" -raw | equals $imageDataLength | verify-true
		    
		    repeat [ val index ] -times 256 -command {
		    	let [ val imageData0 [get-property [concat "getImage().getImageData().data.byte[" [$index | str] "]"] -raw] ] {
		    		get-property [concat "getRightImage().getImageData().data.byte[" [$index | str] "]"] -raw | equals $imageData0 | verify-true
		    	}
		    }
		}
	}
}

with [get-editor "new Plug-in Extensions and Extension Points" | get-diagram -index 1 | get-edit-part 
    -name "new Plug-in Extensions and Extension Points" | get-edit-part -name "org.eclipse.emf.ecore" 
    | get-edit-part -name "(no name) : org.eclipse.emf.ecore.generated_package" | get-edit-part 
    -className RotativeImageEditPart] {
    with [get-figure -path 0] {
	    let [ val imageDataLength [get-property "getImage().getImageData().data.length" -raw]] {
		    let [ val imageString [get-property "getImage().toString()" -raw]] {
	    		get-property "getLeftImage().toString()" -raw | equals $imageString | verify-false
	    		get-property "getBottomImage().toString()" -raw | equals $imageString | verify-false
	    		get-property "getRightImage().toString()" -raw | equals $imageString | verify-false
	    		get-property "getTopImage().toString()" -raw | equals $imageString | verify-true
		    } 
		    get-property "getTopImage().getImageData().data.length" -raw | equals $imageDataLength | verify-true
		    
		    repeat [ val index ] -times 256 -command {
		    	let [ val imageData0 [get-property [concat "getImage().getImageData().data.byte[" [$index | str] "]"] -raw] ] {
		    		get-property [concat "getTopImage().getImageData().data.byte[" [$index | str] "]"] -raw | equals $imageData0 | verify-true
		    	}
		    }
		}
	}
}

// Clean
get-view "Project Explorer" | get-button -index 0 | click
get-menu "Edit/Select All" | click
get-menu "Edit/Delete" | click
with [get-window "Delete Resources"] {
    get-button "Delete project contents on disk (cannot be undone)" | check
    get-button OK | click
}
------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac--
